import numpy as np
import pandas as pd
import re

df_infc_sheet1=pd.read_excel(r'C:\Users\dsandpa\Desktop\input_file\infc.xls',sheet_name='Sheet1').rename(columns={'INFC_STD':'INFC'})
df_infc_sheet2=pd.read_excel(r'C:\Users\dsandpa\Desktop\input_file\infc.xls',sheet_name='Sheet2').rename(columns={'INFC_PANTRY':'INFC'})
df_infc_sheet3=pd.read_excel(r'C:\Users\dsandpa\Desktop\input_file\infc.xls',sheet_name='Sheet3').rename(columns={'INFC_FT':'INFC'})
df_sfx_sheet1=pd.read_excel(r'C:\Users\dsandpa\Desktop\input_file\sfx.xls',sheet_name='Sheet1').rename(columns={'SFX_FT':'SFX'})
df_sfx_sheet2=pd.read_excel(r'C:\Users\dsandpa\Desktop\input_file\sfx.xls',sheet_name='Sheet2').rename(columns={'SFX_STD':'SFX'})
df_mfn_sheet1=pd.read_excel(r'C:\Users\dsandpa\Desktop\input_file\mfn.xls',sheet_name='Sheet1').rename(columns={'MFN_STD':'MFN'})
df_mfn_sheet2=pd.read_excel(r'C:\Users\dsandpa\Desktop\input_file\mfn.xls',sheet_name='Sheet2').rename(columns={'MFN_FT':'MFN'})

def check_first_column_length(datasets):
    for df in datasets:
        first_column = df.iloc[:, 0]
        for val in first_column:
            if len(str(val)) < 4:
                raise ValueError(f"Length of element in the first column of should be 4 or more than 4.")
    return datasets

def check_positive(datasets):
    
    for df in datasets:
        for i in df.select_dtypes(include=['int32','float64']).values:
            if(i<0).any():
                raise ValueError(f"Numbers should be more than 0.")
    return datasets

def sum_check(datasets):
    for df in datasets:
        for col in df.columns:
            if(df[col].sum==0):
                raise ValueError("Sum of each column should be more than zero here it is equal zero")
    return datasets


datasets=[df_infc_sheet1,df_infc_sheet2,df_infc_sheet3,df_sfx_sheet1,df_sfx_sheet2,df_mfn_sheet1,df_mfn_sheet2]
dataframes=check_first_column_length(datasets)
dataframes1=check_positive(datasets)
dataframes2=sum_check(dataframes1)
a,b,c,d,e,f,g=dataframes2

def TVP():
    df_infc_1=a.melt(id_vars=["INFC"], var_name="Date", value_name="Value")
    df_infc_2=b.melt(id_vars=["INFC"], var_name="Date", value_name="Value")
    df_infc_3=c.melt(id_vars=["INFC"], var_name="Date", value_name="Value")
    df_sfx_1=d.melt(id_vars=["SFX"], var_name="Date", value_name="Value")
    df_sfx_2=e.melt(id_vars=["SFX"], var_name="Date", value_name="Value")
    df_mfn_1=f.melt(id_vars=["MFN"], var_name="Date", value_name="Value")
    df_mfn_2=g.melt(id_vars=["MFN"], var_name="Date", value_name="Value")
    df_infc_1['forecast_indicator']='INFC'
    df_infc_2['forecast_indicator']='INFC'
    df_infc_3['forecast_indicator']='INFC'
    df_sfx_1['forecast_indicator']='SFX'
    df_sfx_2['forecast_indicator']='SFX'
    df_mfn_1['forecast_indicator']='MFN'
    df_mfn_2['forecast_indicator']='MFN'
    df_mfn_1.dtypes
    df_infc=pd.concat([df_infc_1,df_infc_2,df_infc_3]).rename(columns={'INFC':'warehouse_id','Date':'slam_date','Value':'units'})
    df_sfx=pd.concat([df_sfx_1,df_sfx_2]).rename(columns={'SFX':'warehouse_id','Date':'slam_date','Value':'units'})
    df_mfn=pd.concat([df_mfn_1,df_mfn_2]).rename(columns={'MFN':'warehouse_id','Date':'slam_date','Value':'units'})
    df=pd.concat([df_infc,df_sfx,df_mfn])
    df['upload_date']=pd.to_datetime('today').normalize()
    df['units']=pd.to_numeric(df['units'],errors='coerce').fillna(0)
    
    
    return df

q=TVP()
x=input('Enter the start date in YYYY-MM-DD format:')


# #Asking for the end date
y=input('Enter the end date in YYYY-MM-DD format:')


# #Filtering on the dates entered and then grouping by warehouse and slam date 
TVP_df=q.set_index('slam_date').loc[x:y].pivot_table(index=['warehouse_id','slam_date','upload_date','forecast_indicator'],values="units",aggfunc=np.sum).reset_index()


# # Create a Pandas Excel writer using XlsxWriter as the engine.
TVP_df.to_excel(r'C:\Users\dsandpa\Desktop\input_file\IN_unit_demandoverride.xlsx',index=False)
